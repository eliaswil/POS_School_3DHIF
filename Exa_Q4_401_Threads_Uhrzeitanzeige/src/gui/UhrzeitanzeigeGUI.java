/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.time.ZoneId;
import javax.swing.JComboBox;
import javax.swing.JLabel;

/**
 *
 * @author Elias Wilfinger
 */
public class UhrzeitanzeigeGUI extends javax.swing.JFrame {
    
    private final int NO_LOCATIONS = 3;
    
    private Thread[] threads;
    private LocationTimePanel[] rows;
    private ZoneId[] zones;
    
    

    /**
     * Creates new form UhrzeitanzeigeGUI
     */
    public UhrzeitanzeigeGUI() {
        
        this.rows = new LocationTimePanel[NO_LOCATIONS];
        this.threads = new Thread[NO_LOCATIONS];
        this.zones = new ZoneId[NO_LOCATIONS];
        
        
        initZones();
        initComponents();
        initAdditionalComponents();
        startThreads();
        
        this.setLocationRelativeTo(null);
        this.setSize(500, 300);
        getContentPane().setBackground(Color.GRAY);
        this.setTitle("Uhranzeige");
        
        
    }
    
    private void startThreads(){
        for (int i = 0; i < threads.length; i++) {
            this.threads[i] = new Thread(this.rows[i]);
            this.threads[i].start();
        }
    }
    
    private void initZones(){ // Default Zones
        this.zones[0] = ZoneId.systemDefault();
        this.zones[1] = ZoneId.of("America/Los_Angeles");
        this.zones[2] = ZoneId.of("UCT");
    }
    
    private void initAdditionalComponents(){

        this.add(new JLabel("   Local Time"));
        this.rows[0] = new LocationTimePanel(this.zones[0]);
        this.add(this.rows[0]);
        
        for (int i = 1; i < rows.length; i++) {
            String[] availableZones = ZoneId.getAvailableZoneIds().stream().sorted().toArray(String[]::new);
            JComboBox<String> cbZones = new JComboBox<>(availableZones);
            
            cbZones.setBackground(Color.DARK_GRAY);
            
            cbZones.setActionCommand(i + "");
            cbZones.setSelectedItem(this.zones[i].toString());
            
            cbZones.addActionListener((e) -> {
                String selectedZone = (String)cbZones.getSelectedItem();
                int index = Integer.parseInt(e.getActionCommand());
                this.zones[index] = ZoneId.of(selectedZone);
                this.rows[index].setZone(this.zones[index]);
            });
            this.add(cbZones);
            
            this.rows[i] = new LocationTimePanel(this.zones[i]);
            this.add(this.rows[i]);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(3, 2));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UhrzeitanzeigeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UhrzeitanzeigeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UhrzeitanzeigeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UhrzeitanzeigeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UhrzeitanzeigeGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
